package com.lzw.badge.compiler;

import com.google.auto.service.AutoService;
import com.squareup.javapoet.AnnotationSpec;
import com.squareup.javapoet.ClassName;
import com.squareup.javapoet.CodeBlock;
import com.squareup.javapoet.FieldSpec;
import com.squareup.javapoet.JavaFile;
import com.squareup.javapoet.MethodSpec;
import com.squareup.javapoet.ParameterizedTypeName;
import com.squareup.javapoet.TypeName;
import com.squareup.javapoet.TypeSpec;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import java.util.stream.IntStream;

import javax.annotation.processing.AbstractProcessor;
import javax.annotation.processing.Filer;
import javax.annotation.processing.Messager;
import javax.annotation.processing.ProcessingEnvironment;
import javax.annotation.processing.Processor;
import javax.annotation.processing.RoundEnvironment;
import javax.annotation.processing.SupportedSourceVersion;
import javax.lang.model.SourceVersion;
import javax.lang.model.element.Element;
import javax.lang.model.element.ElementKind;
import javax.lang.model.element.Modifier;
import javax.lang.model.element.TypeElement;
import javax.lang.model.type.DeclaredType;
import javax.lang.model.type.MirroredTypesException;
import javax.lang.model.type.TypeMirror;
import javax.lang.model.util.Elements;
import javax.swing.text.html.ImageView;
import javax.tools.Diagnostic;

import com.lzw.badgeview.annotation.ABadge;
import com.sun.net.httpserver.Headers;


/**
 * AnnotationProcessor.
 * <p>This class can generate .java files at compile time and call related methods during program execution, achieving the effect of reducing duplicate code.</p>
 * <p>To use of annotation compilers can improve development efficiency, making projects easier to maintain and expand, while hardly affecting performance.</p>
 */
@AutoService(Processor.class)
//@SupportedAnnotationTypes("com.lzw.badgeview.annotation.ABadge") // 要处理的注解类型 Tell Processor What annotations should  be handled.
@SupportedSourceVersion(SourceVersion.RELEASE_8)    //支持的源码版本 Processor use jdk 1.8
public class ABadgeProcessor extends AbstractProcessor {
    private static final String CLASS_JAVA_DOC = "Generated by ABadgeView. Do not edit it!\n";

    private static final String PACKAGE_NAME = "com.lzw.badgeview";
    private static final String PACKAGE_NAME_VIEW = "android.view";
    private static final String PACKAGE_NAME_CONTEXT = "android.content";
    private static final String PACKAGE_NAME_DRAWABLE = "android.graphics.drawable";
    private static final String PACKAGE_NAME_POINTF = "android.graphics";
    private static final String PACKAGE_NAME_BNV = "com.google.android.material.bottomnavigation";
    private static final String PACKAGE_NAME_BADGEDRAWABLE = "com.google.android.material.badge";

    private static final String CLASS_PREFIX = "ABadge";

    private Filer mFileUtils;
    private Elements mElementUtils;
    private Messager mMessager;

    private ClassName classNameView = ClassName.get(PACKAGE_NAME_VIEW, "View");
    private ClassName classNameContext = ClassName.get(PACKAGE_NAME_CONTEXT, "Context");
    private ClassName classNameDrawable = ClassName.get(PACKAGE_NAME_DRAWABLE, "Drawable");
    private ClassName classNamePointF = ClassName.get(PACKAGE_NAME_POINTF, "PointF");
    private ClassName classNameBNV = ClassName.get(PACKAGE_NAME_BNV, "BottomNavigationView");
    private ClassName classNameBadgeDrawable = ClassName.get(PACKAGE_NAME_BADGEDRAWABLE, "BadgeDrawable");

    ClassName classNameSuppressLint = ClassName.get("android.annotation", "SuppressLint");

    // 相当于 ArrayList<Integer>
    ParameterizedTypeName parameterizedTypeNameList = ParameterizedTypeName.get(ArrayList.class, Integer.class);

    // 相当于 HashMap<Integer, BadgeDrawable>
    ClassName classNameInteger = ClassName.get("java.lang", "Integer");
    ClassName hashMap = ClassName.get("java.util", "HashMap");
    ParameterizedTypeName parameterizedTypeNameMap = ParameterizedTypeName.get(hashMap, classNameInteger, classNameBadgeDrawable);

    private ClassName classNameIABadge = ClassName.get(PACKAGE_NAME, "IABadge");
    private ClassName classNameListener = ClassName.get(PACKAGE_NAME, "OnBadgeDragStateChangedListener");

    @Override
    public synchronized void init(ProcessingEnvironment processingEnvironment) {
        super.init(processingEnvironment);
        mFileUtils = processingEnv.getFiler();
        mElementUtils = processingEnv.getElementUtils();
        mMessager = processingEnv.getMessager();
    }

//    @Override
//    public SourceVersion getSupportedSourceVersion() {
//        return SourceVersion.latestSupported();
//    }
//

    /**
     * Tell Processor What annotations should  be handled.
     *
     * @return Returns a Set collection , it contains package name and class name of the custom annotation.
     */
    @Override
    public Set<String> getSupportedAnnotationTypes() {
        final Set<String> annotationTypes = new LinkedHashSet<>();
        annotationTypes.add(ABadge.class.getCanonicalName());
        return annotationTypes;
    }

    /**
     * All annotation processing starts with this method, and when APT finds all the annotations that
     * need to be processed, it will call back this method.
     * <p>When no annotations belonging to the processor processing are used, the method will not be called back.</p>
     *
     * @param set              Annotations processed by this Processor and pending processing (belonging to annotations processed by this Processor but not used and will not be included in this Set).
     * @param roundEnvironment Represents the current or previous runtime environment, and the annotations can be found through the roundEnvironment.
     * @return Indicates whether this set of annotations has been consumed by this processor.
     * If the consumption returns true, subsequent processors will no longer process this set of annotations.
     */
    @Override
    public boolean process(Set<? extends TypeElement> set, RoundEnvironment roundEnvironment) {
        Set<? extends Element> elements = roundEnvironment.getElementsAnnotatedWith(ABadge.class);
        if (elements == null || elements.isEmpty()) {
            return true;
        }
        mMessager.printMessage(Diagnostic.Kind.NOTE,
                "====================================== ABadgeProcessor process START ======================================");
        Set<String> viewClassSet = new HashSet<>();
        parseParams(elements, viewClassSet);
        try {
            generate(viewClassSet);
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (IOException e) {
            mMessager.printMessage(Diagnostic.Kind.NOTE, "Exception occurred when generating class file.");
            e.printStackTrace();
        }
        mMessager.printMessage(Diagnostic.Kind.NOTE,
                "====================================== ABadgeProcessor process END ======================================");
        return true;
    }

    private void parseParams(Set<? extends Element> elements, Set<String> viewClassSet) {
        for (Element element : elements) {
            checkAnnotationValid(element, ABadge.class);
            TypeElement classElement = (TypeElement) element;
            // 获取该注解的值
            ABadge badgeAnnotation = classElement.getAnnotation(ABadge.class);
            try {
                badgeAnnotation.value();
            } catch (MirroredTypesException e) {
                List<? extends TypeMirror> typeMirrors = e.getTypeMirrors();
                for (TypeMirror typeMirror : typeMirrors) {
                    DeclaredType classTypeMirror = (DeclaredType) typeMirror;
                    TypeElement classTypeElement = (TypeElement) classTypeMirror.asElement();
                    String qualifiedName = classTypeElement.getQualifiedName().toString();
                    viewClassSet.add(qualifiedName);
                }
            }
        }
    }

    private void generate(Set<String> viewClassSet) throws IllegalAccessException, IOException {
        mMessager.printMessage(Diagnostic.Kind.NOTE, "generate " + viewClassSet.size());
        for (String clazz : viewClassSet) {

            // 如果让ViewGroup有badge效果，需要重写 onLayout 方法（通常不会直接操作ViewGroup，都是用它的子类）
            if ("android.view.ViewGroup".equals(clazz) || "android.view.View".equals(clazz)) {
                throw new IllegalArgumentException("The parameters of the current annotation [@ABadge] include [" + clazz + "]. For better experience, it's recommended to use subClasses of View or subClasses of ViewGroup!");
            }

            int lastDotIndex = clazz.lastIndexOf(".");
            String superPackageName = clazz.substring(0, lastDotIndex);
            String superClassName = clazz.substring(lastDotIndex + 1);
            String className = CLASS_PREFIX + superClassName;

            mMessager.printMessage(Diagnostic.Kind.NOTE, clazz + " ====> " + className);

            TypeSpec.Builder typeBuilder = null;
            if ("com.google.android.material.bottomnavigation.BottomNavigationView".equals(clazz)) {

                // 添加实例化变量， private HashMap<Integer, BadgeDrawable> mHaveBadgeMap = new HashMap<>();
//                FieldSpec arrayListField = FieldSpec.builder(parameterizedTypeNameMap, "mHaveBadgeMap")
//                        .addModifiers(Modifier.PRIVATE)
//                        .initializer("new HashMap<>()")
//                        .build();

                typeBuilder = TypeSpec.classBuilder(className)
                        .addJavadoc(CLASS_JAVA_DOC)
                        .addModifiers(Modifier.PUBLIC)
                        .superclass(ClassName.get(superPackageName, superClassName))
//                        .addField(arrayListField);
                        .addField(boolean.class, "mIsNeedShowBadge", Modifier.PRIVATE)
                        .addField(ClassName.get(PACKAGE_NAME, "ABadgeView"), "mABadgeView", Modifier.PRIVATE);
                generateConstructor(typeBuilder, clazz);

                generateMethod(typeBuilder, clazz);
                generateMethodBnv(typeBuilder);

            } else {
                typeBuilder = TypeSpec.classBuilder(className)
                        .addJavadoc(CLASS_JAVA_DOC)
                        .addModifiers(Modifier.PUBLIC)
                        .superclass(ClassName.get(superPackageName, superClassName))
                        .addField(boolean.class, "mIsNeedShowBadge", Modifier.PRIVATE)
                        .addField(ClassName.get(PACKAGE_NAME, "ABadgeView"), "mABadgeView", Modifier.PRIVATE);
                generateConstructor(typeBuilder, clazz);
                generateMethod(typeBuilder, clazz);
            }

            JavaFile javaFile = JavaFile.builder(PACKAGE_NAME, typeBuilder.build()).build();
            javaFile.writeTo(mFileUtils);
        }
    }

    private void generateConstructor(TypeSpec.Builder typeBuilder, String clazz) {
        TypeName contextType = ClassName.get("android.content", "Context");
        TypeName attributeSetType = ClassName.get("android.util", "AttributeSet");

        MethodSpec constructorOne = null;
        MethodSpec constructorTwo = null;
        MethodSpec constructorThree = null;

        MethodSpec.Builder constructorOneBuilder = MethodSpec.constructorBuilder()
                .addModifiers(Modifier.PUBLIC)
                .addParameter(contextType, "context")
                .addStatement("this(context, null)");
        constructorOne = constructorOneBuilder.build();
        MethodSpec.Builder constructorTwoBuilder = MethodSpec.constructorBuilder()
                .addModifiers(Modifier.PUBLIC)
                .addParameter(contextType, "context")
                .addParameter(attributeSetType, "attrs")
                .addStatement("this(context, attrs, 0)");
        constructorTwo = constructorTwoBuilder.build();

//        String defStyleAttr = "0";
//        if (isAssignable(clazz, "android.widget.RadioButton")) {
//            defStyleAttr = "android.R.attr.radioButtonStyle";
//        } else if (isAssignable(clazz, "android.widget.TextView")) {
//            defStyleAttr = "android.R.attr.textViewStyle";
//        } else if (isAssignable(clazz, "android.widget.ImageView")) {
//            defStyleAttr = "android.R.attr.textViewStyle";
//        }

        MethodSpec.Builder constructorThreeBuilder = MethodSpec.constructorBuilder()
                .addModifiers(Modifier.PUBLIC)
                .addParameter(contextType, "context")
                .addParameter(attributeSetType, "attrs")
                .addParameter(int.class, "defStyleAttr")
//                .addStatement("super(context, attrs, " + defStyleAttr + ")");
                .addStatement("super(context, attrs, defStyleAttr)");
        constructorThree = constructorThreeBuilder.build();
        typeBuilder.addMethod(constructorOne)
                .addMethod(constructorTwo)
                .addMethod(constructorThree);

    }

    private void generateMethod(TypeSpec.Builder typeBuilder, String clazz) {

        //////////////////////////////////////////////////////////////////////////////
        ////////
        //////// 使用自定义ABadgeView:
        ////////
        //////////////////////////////////////////////////////////////////////////////

        MethodSpec typeMethod4 = MethodSpec.methodBuilder("setIsNeedShowBadge")
                .addModifiers(Modifier.PUBLIC)
                .addParameter(boolean.class, "isShowBadge")
                .addStatement("this.mIsNeedShowBadge = isShowBadge")
                .beginControlFlow("if(isShowBadge)")
                .addStatement("this.mABadgeView = new ABadgeView(getContext())")
                .endControlFlow()
                .build();
        typeBuilder.addMethod(typeMethod4);

        MethodSpec typeMethod5 = MethodSpec.methodBuilder("getIsNeedShowBadge")
                .addModifiers(Modifier.PUBLIC)
                .addStatement("return this.mIsNeedShowBadge")
                .returns(boolean.class)
                .build();
        typeBuilder.addMethod(typeMethod5);

        MethodSpec typeMethod6 = MethodSpec.methodBuilder("getABadgeView")
                .addModifiers(Modifier.PUBLIC)
                .addStatement("return this.mABadgeView")
                .returns(ClassName.get(PACKAGE_NAME, "ABadgeView"))
                .build();
        typeBuilder.addMethod(typeMethod6);

        MethodSpec typeMethod7 = MethodSpec.methodBuilder("bindTarget")
                .addModifiers(Modifier.PUBLIC)
                .addParameter(classNameView, "targetView")
                .addStatement("return mABadgeView.bindTarget(targetView)")
                .returns(classNameIABadge)
                .build();
        typeBuilder.addMethod(typeMethod7);
        MethodSpec typeMethod8 = MethodSpec.methodBuilder("getTargetView")
                .addModifiers(Modifier.PUBLIC)
                .addStatement("return mABadgeView.getTargetView()")
                .returns(classNameView)
                .build();
        typeBuilder.addMethod(typeMethod8);

        MethodSpec typeMethod9 = MethodSpec.methodBuilder("setBadgeNumberExactMode")
                .addModifiers(Modifier.PUBLIC)
                .addParameter(boolean.class, "isExact")
                .addStatement("return mABadgeView.setBadgeNumberExactMode(isExact)")
                .returns(classNameIABadge)
                .build();
        typeBuilder.addMethod(typeMethod9);
        MethodSpec typeMethod10 = MethodSpec.methodBuilder("getBadgeNumberExactMode")
                .addModifiers(Modifier.PUBLIC)
                .addStatement("return mABadgeView.getBadgeNumberExactMode()")
                .returns(boolean.class)
                .build();
        typeBuilder.addMethod(typeMethod10);

        MethodSpec typeMethod11 = MethodSpec.methodBuilder("setBadgeNumber")
                .addModifiers(Modifier.PUBLIC)
                .addParameter(int.class, "badgeNum")
                .addStatement("return mABadgeView.setBadgeNumber(badgeNum)")
                .returns(classNameIABadge)
                .build();
        typeBuilder.addMethod(typeMethod11);
        MethodSpec typeMethod12 = MethodSpec.methodBuilder("getBadgeNumber")
                .addModifiers(Modifier.PUBLIC)
                .addStatement("return mABadgeView.getBadgeNumber()")
                .returns(int.class)
                .build();
        typeBuilder.addMethod(typeMethod12);

        MethodSpec typeMethod13 = MethodSpec.methodBuilder("setBadgeText")
                .addModifiers(Modifier.PUBLIC)
                .addParameter(String.class, "badgeText")
                .addStatement("return mABadgeView.setBadgeText(badgeText)")
                .returns(classNameIABadge)
                .build();
        typeBuilder.addMethod(typeMethod13);
        MethodSpec typeMethod14 = MethodSpec.methodBuilder("getBadgeText")
                .addModifiers(Modifier.PUBLIC)
                .addStatement("return mABadgeView.getBadgeText()")
                .returns(String.class)
                .build();
        typeBuilder.addMethod(typeMethod14);

        MethodSpec typeMethod15 = MethodSpec.methodBuilder("setBadgeTextSize")
                .addModifiers(Modifier.PUBLIC)
                .addParameter(float.class, "size")
                .addParameter(boolean.class, "isSpValue")
                .addStatement("return mABadgeView.setBadgeTextSize(size, isSpValue)")
                .returns(classNameIABadge)
                .build();
        typeBuilder.addMethod(typeMethod15);
        MethodSpec typeMethod16 = MethodSpec.methodBuilder("getBadgeTextSize")
                .addModifiers(Modifier.PUBLIC)
                .addParameter(boolean.class, "isSpValue")
                .addStatement("return mABadgeView.getBadgeTextSize(isSpValue)")
                .returns(float.class)
                .build();
        typeBuilder.addMethod(typeMethod16);

        MethodSpec typeMethod17 = MethodSpec.methodBuilder("setBadgeTextColor")
                .addModifiers(Modifier.PUBLIC)
                .addParameter(int.class, "color")
                .addStatement("return mABadgeView.setBadgeTextColor(color)")
                .returns(classNameIABadge)
                .build();
        typeBuilder.addMethod(typeMethod17);
        MethodSpec typeMethod18 = MethodSpec.methodBuilder("getBadgeTextColor")
                .addModifiers(Modifier.PUBLIC)
                .addStatement("return mABadgeView.getBadgeTextColor()")
                .returns(int.class)
                .build();
        typeBuilder.addMethod(typeMethod18);

        MethodSpec typeMethod19 = MethodSpec.methodBuilder("setShowBadgeShadow")
                .addModifiers(Modifier.PUBLIC)
                .addParameter(boolean.class, "showShadow")
                .addStatement("return mABadgeView.setShowBadgeShadow(showShadow)")
                .returns(classNameIABadge)
                .build();
        typeBuilder.addMethod(typeMethod19);
        MethodSpec typeMethod20 = MethodSpec.methodBuilder("getIsShowBadgeShadow")
                .addModifiers(Modifier.PUBLIC)
                .addStatement("return mABadgeView.getIsShowBadgeShadow()")
                .returns(boolean.class)
                .build();
        typeBuilder.addMethod(typeMethod20);

        MethodSpec typeMethod21 = MethodSpec.methodBuilder("setBadgeBackgroundColor")
                .addModifiers(Modifier.PUBLIC)
                .addParameter(int.class, "color")
                .addStatement("return mABadgeView.setBadgeBackgroundColor(color)")
                .returns(classNameIABadge)
                .build();
        typeBuilder.addMethod(typeMethod21);
        MethodSpec typeMethod22 = MethodSpec.methodBuilder("getBadgeBackgroundColor")
                .addModifiers(Modifier.PUBLIC)
                .addStatement("return mABadgeView.getBadgeBackgroundColor()")
                .returns(int.class)
                .build();
        typeBuilder.addMethod(typeMethod22);

        MethodSpec typeMethod23 = MethodSpec.methodBuilder("setBadgeBackgroundDrawable")
                .addModifiers(Modifier.PUBLIC)
                .addParameter(classNameDrawable, "drawable")
                .addStatement("return mABadgeView.setBadgeBackgroundDrawable(drawable)")
                .returns(classNameIABadge)
                .build();
        typeBuilder.addMethod(typeMethod23);
        MethodSpec typeMethod24 = MethodSpec.methodBuilder("setBadgeBackgroundDrawable")
                .addModifiers(Modifier.PUBLIC)
                .addParameter(classNameDrawable, "drawable")
                .addParameter(boolean.class, "clip")
                .addStatement("return mABadgeView.setBadgeBackgroundDrawable(drawable, clip)")
                .returns(classNameIABadge)
                .build();
        typeBuilder.addMethod(typeMethod24);
        MethodSpec typeMethod25 = MethodSpec.methodBuilder("getBadgeBackgroundDrawable")
                .addModifiers(Modifier.PUBLIC)
                .addStatement("return mABadgeView.getBadgeBackgroundDrawable()")
                .returns(classNameDrawable)
                .build();
        typeBuilder.addMethod(typeMethod25);

        MethodSpec typeMethod26 = MethodSpec.methodBuilder("setBadgeBorderStroke")
                .addModifiers(Modifier.PUBLIC)
                .addParameter(int.class, "color")
                .addParameter(float.class, "width")
                .addParameter(boolean.class, "isDpValue")
                .addStatement("return mABadgeView.setBadgeBorderStroke(color, width, isDpValue)")
                .returns(classNameIABadge)
                .build();
        typeBuilder.addMethod(typeMethod26);

        MethodSpec typeMethod27 = MethodSpec.methodBuilder("setBadgeGravity")
                .addModifiers(Modifier.PUBLIC)
                .addParameter(int.class, "gravity")
                .addStatement("return mABadgeView.setBadgeGravity(gravity)")
                .returns(classNameIABadge)
                .build();
        typeBuilder.addMethod(typeMethod27);
        MethodSpec typeMethod28 = MethodSpec.methodBuilder("getBadgeGravity")
                .addModifiers(Modifier.PUBLIC)
                .addStatement("return mABadgeView.getBadgeGravity()")
                .returns(int.class)
                .build();
        typeBuilder.addMethod(typeMethod28);

        MethodSpec typeMethod29 = MethodSpec.methodBuilder("setBadgePadding")
                .addModifiers(Modifier.PUBLIC)
                .addParameter(float.class, "padding")
                .addParameter(boolean.class, "isDpValue")
                .addStatement("return mABadgeView.setBadgePadding(padding, isDpValue)")
                .returns(classNameIABadge)
                .build();
        typeBuilder.addMethod(typeMethod29);
        MethodSpec typeMethod30 = MethodSpec.methodBuilder("getBadgePadding")
                .addModifiers(Modifier.PUBLIC)
                .addParameter(boolean.class, "isDpValue")
                .addStatement("return mABadgeView.getBadgePadding(isDpValue)")
                .returns(float.class)
                .build();
        typeBuilder.addMethod(typeMethod30);

        MethodSpec typeMethod31 = MethodSpec.methodBuilder("setBadgeGravityOffset")
                .addModifiers(Modifier.PUBLIC)
                .addParameter(float.class, "offset")
                .addParameter(boolean.class, "isDpValue")
                .addStatement("return mABadgeView.setBadgeGravityOffset(offset, isDpValue)")
                .returns(classNameIABadge)
                .build();
        typeBuilder.addMethod(typeMethod31);
        MethodSpec typeMethod32 = MethodSpec.methodBuilder("setBadgeGravityOffset")
                .addModifiers(Modifier.PUBLIC)
                .addParameter(float.class, "offsetX")
                .addParameter(float.class, "offsetY")
                .addParameter(boolean.class, "isDpValue")
                .addStatement("return mABadgeView.setBadgeGravityOffset(offsetX, offsetY, isDpValue)")
                .returns(classNameIABadge)
                .build();
        typeBuilder.addMethod(typeMethod32);

        MethodSpec typeMethod33 = MethodSpec.methodBuilder("getBadgeGravityOffsetX")
                .addModifiers(Modifier.PUBLIC)
                .addParameter(boolean.class, "isDpValue")
                .addStatement("return mABadgeView.getBadgeGravityOffsetX(isDpValue)")
                .returns(float.class)
                .build();
        typeBuilder.addMethod(typeMethod33);

        MethodSpec typeMethod34 = MethodSpec.methodBuilder("getBadgeGravityOffsetY")
                .addModifiers(Modifier.PUBLIC)
                .addParameter(boolean.class, "isDpValue")
                .addStatement("return mABadgeView.getBadgeGravityOffsetY(isDpValue)")
                .returns(float.class)
                .build();
        typeBuilder.addMethod(typeMethod34);

        MethodSpec typeMethod35 = MethodSpec.methodBuilder("setBadgeIsDraggable")
                .addModifiers(Modifier.PUBLIC)
                .addParameter(boolean.class, "draggable")
                .addStatement("return mABadgeView.setBadgeIsDraggable(draggable)")
                .returns(classNameIABadge)
                .build();
        typeBuilder.addMethod(typeMethod35);

        MethodSpec typeMethod36 = MethodSpec.methodBuilder("getBadgeIsDraggable")
                .addModifiers(Modifier.PUBLIC)
                .addStatement("return mABadgeView.getBadgeIsDraggable()")
                .returns(boolean.class)
                .build();
        typeBuilder.addMethod(typeMethod36);

        MethodSpec typeMethod37 = MethodSpec.methodBuilder("setOnBadgeDragStateChangedListener")
                .addModifiers(Modifier.PUBLIC)
                .addParameter(classNameListener, "listener")
                .addStatement("return mABadgeView.setOnBadgeDragStateChangedListener(listener)")
                .returns(classNameIABadge)
                .build();
        typeBuilder.addMethod(typeMethod37);

        MethodSpec typeMethod38 = MethodSpec.methodBuilder("getBadgeDragCenter")
                .addModifiers(Modifier.PUBLIC)
                .addStatement("return mABadgeView.getBadgeDragCenter()")
                .returns(classNamePointF)
                .build();
        typeBuilder.addMethod(typeMethod38);

        MethodSpec typeMethod39 = MethodSpec.methodBuilder("hideBadge")
                .addModifiers(Modifier.PUBLIC)
                .addParameter(boolean.class, "animate")
                .addStatement("mABadgeView.hideBadge(animate)")
                .build();
        typeBuilder.addMethod(typeMethod39);

        MethodSpec typeMethod40 = MethodSpec.methodBuilder("resetBadge")
                .addModifiers(Modifier.PUBLIC)
                .addStatement("mABadgeView.resetBadge()")
                .build();
        typeBuilder.addMethod(typeMethod40);

    }


    private void generateMethodBnv(TypeSpec.Builder typeBuilder) {

        //////////////////////////////////////////////////////////////////////////////
        ////////
        ////////  使用自定义ABadgeView：【这个是针对BottomNavigationView item特殊处理的一个方法，只需要传入index即可绑定。】
        ////////
        ////////  使用示例：
        ////////  bottomNavigationView.setIsNeedShowBadge(true);
        ////////  bottomNavigationView.bindTargetItemIndex(2)
        ////////
        //////////////////////////////////////////////////////////////////////////////

        MethodSpec typeMethod = MethodSpec.methodBuilder("bindTargetItemIndex")
                .addModifiers(Modifier.PUBLIC)
                .addParameter(int.class, "itemIndex")
                .addStatement("com.google.android.material.bottomnavigation.BottomNavigationMenuView menuView = (com.google.android.material.bottomnavigation.BottomNavigationMenuView) this.getChildAt(0)")
                .addStatement("com.google.android.material.bottomnavigation.BottomNavigationItemView itemView = (com.google.android.material.bottomnavigation.BottomNavigationItemView) menuView.getChildAt(itemIndex)")
                .addStatement("return getABadgeView().bindTarget(itemView)")
                .returns(classNameIABadge)
                .build();
        typeBuilder.addMethod(typeMethod);

        //////////////////////////////////////////////////////////////////////////////
        ////////
        ////////  使用官方的BadgeDrawable：
        ////////
        ////////  使用BadgeDrawable注意事项：1: app主题需使用 Theme.MaterialComponents.*
        ////////        2: api要求 18+, 也就是Android 4.3以上
        ////////
        //////////////////////////////////////////////////////////////////////////////

        // 给方法添加添加带参数的注解
        AnnotationSpec annotationSpec = AnnotationSpec.builder(classNameSuppressLint)
                .addMember("value", "$S", "UnsafeExperimentalUsageError")
                .build();
        MethodSpec typeMethod1 = MethodSpec.methodBuilder("addBadgeDefault")
                .addAnnotation(annotationSpec)
                .addModifiers(Modifier.PUBLIC)
                .addParameter(classNameContext, "context")
//                .addParameter(int.class, "index")
                .addParameter(int.class, "menuItemId")
                .addParameter(int.class, "number")
                .addStatement("BadgeDrawable badgeDrawable = this.getOrCreateBadge(menuItemId)")
                .addStatement("badgeDrawable.setBadgeGravity(BadgeDrawable.TOP_END)")
                .addStatement("badgeDrawable.setNumber(number)")
                .build();
        typeBuilder.addMethod(typeMethod1);


        MethodSpec typeMethod2 = MethodSpec.methodBuilder("addBadgeCustom")
                .addAnnotation(annotationSpec)
                .addModifiers(Modifier.PUBLIC)
                .addParameter(int.class, "menuItemId")
                .addStatement("BadgeDrawable badgeDrawable = this.getOrCreateBadge(menuItemId)")
                .addStatement("return badgeDrawable")
                .returns(classNameBadgeDrawable)
                .build();
        typeBuilder.addMethod(typeMethod2);

        MethodSpec typeMethod3 = MethodSpec.methodBuilder("removeBadge")
                .addAnnotation(annotationSpec)
                .addModifiers(Modifier.PUBLIC)
                .addParameter(int.class, "menuItemId")
                .addStatement("this.removeBadge(menuItemId)")
                .build();
        typeBuilder.addMethod(typeMethod3);


        //////////////////////////////////////////////////////////////////////////////
        ////////
        ////////  使用自定义xml布局：
        ////////
        //////////////////////////////////////////////////////////////////////////////

        MethodSpec typeMethod4 = MethodSpec.methodBuilder("addBadgeFromXmlLayout")
                .addAnnotation(annotationSpec)
                .addModifiers(Modifier.PUBLIC)
                .addParameter(classNameContext, "context")
                .addParameter(int.class, "index")
                .addParameter(int.class, "layoutResId")
                .addStatement("com.google.android.material.bottomnavigation.BottomNavigationMenuView menuView = (com.google.android.material.bottomnavigation.BottomNavigationMenuView)this.getChildAt(0)")
                .addStatement("com.google.android.material.bottomnavigation.BottomNavigationItemView itemView = (com.google.android.material.bottomnavigation.BottomNavigationItemView) menuView.getChildAt(index)")
                .addStatement("itemView.addView(android.view.LayoutInflater.from(context).inflate(layoutResId, itemView, false))")

                // 这个是item的icon
//                .addStatement("android.widget.ImageView icon = itemView.findViewById(com.google.android.material.R.id.navigation_bar_item_icon_view)")
//               // 这个是小文字，12sp
//                .addStatement("android.widget.TextView textView1 = itemView.findViewById(com.google.android.material.R.id.navigation_bar_item_small_label_view)")
//                  // 这个是大文字，14sp
//                .addStatement("android.widget.TextView textView2 = itemView.findViewById(com.google.android.material.R.id.navigation_bar_item_large_label_view)")
                .build();
        typeBuilder.addMethod(typeMethod4);

    }


    private boolean checkAnnotationValid(Element annotatedElement, Class clazz) {
        if (annotatedElement.getKind() != ElementKind.CLASS) {
            NOTE(annotatedElement, "%s must be declared on class.", clazz.getSimpleName());
            return false;
        }

        if (annotatedElement.getModifiers().contains(Modifier.PRIVATE)) {
            NOTE(annotatedElement, "%s must can not be private.", ((TypeElement) annotatedElement).getQualifiedName());
            return false;
        }
        return true;
    }

    private void NOTE(Element element, String message, Object... args) {
        if (args.length > 0) {
            message = String.format(message, args);
        }
        mMessager.printMessage(Diagnostic.Kind.NOTE, message, element);
    }

    private boolean isAssignable(String childClazz, String superClazz) {
        return processingEnv.getTypeUtils().isAssignable(
                processingEnv.getElementUtils().getTypeElement(childClazz).asType(),
                processingEnv.getElementUtils().getTypeElement(superClazz).asType());
    }

}